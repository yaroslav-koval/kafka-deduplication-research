// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package schema generated by go-bindata.// sources:
// pkg/workflow/migration/schema/1_workflow.down.sql
// pkg/workflow/migration/schema/1_workflow.up.sql
// pkg/workflow/migration/schema/2_workflow_history.down.sql
// pkg/workflow/migration/schema/2_workflow_history.up.sql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_workflowDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\xcf\x2f\xca\x4e\xcb\xc9\x2f\xb7\xe6\x02\x04\x00\x00\xff\xff\xec\x4c\xdc\x8b\x26\x00\x00\x00")

func _1_workflowDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_workflowDownSql,
		"1_workflow.down.sql",
	)
}

func _1_workflowDownSql() (*asset, error) {
	bytes, err := _1_workflowDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_workflow.down.sql", size: 38, mode: os.FileMode(420), modTime: time.Unix(1675702993, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_workflowUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x4d\x4f\xb3\x40\x14\x85\xf7\xfc\x8a\xb3\x03\x92\x77\xf1\x6e\x5c\xb9\xa2\xed\x34\x41\x29\x18\xb8\xc4\xd6\x0d\x99\xc0\x6d\x4a\x2a\x1f\xde\x19\xec\xc2\xf8\xdf\x8d\x40\xab\x8d\x71\xe5\xf6\x3e\xe7\x3c\x73\x32\xcb\x54\x05\xa4\x40\xc1\x22\x52\x08\xd7\x88\x13\x82\xda\x86\x19\x65\x38\x75\x72\xdc\x3f\x77\x27\x78\x0e\x00\xd4\x15\xf2\x3c\x5c\xe1\x21\x0d\x37\x41\xba\xc3\xbd\xda\xfd\x1b\x41\xaf\x85\x5b\x5b\x9c\x79\x9c\x47\x11\x84\xf7\x2c\xdc\x96\x6c\x2e\x1a\xaf\xae\xfc\xa9\x60\xac\xb6\x83\x01\xa9\x2d\x8d\xef\x7d\x36\x26\x52\xb7\xfd\x60\x71\x97\x25\xf1\xe2\x42\xb0\x52\xeb\x20\x8f\x08\xee\xdb\xbb\x3b\x0b\xca\x03\x37\xba\x68\x75\xc3\xd7\x96\xaf\xec\x39\x69\xb9\x37\x93\x70\x3a\x08\xbf\x0c\x6c\xc6\xb5\xaf\x5a\xca\x83\x16\xef\xe6\xbf\xff\x6d\x02\x8b\x74\x32\x5b\xaf\x8f\xc5\xb1\x6e\x7f\x6b\x95\xc2\xda\x72\x55\x68\x0b\x5b\x37\x6c\xac\x6e\xfa\x9f\xab\xbc\x38\x79\xf4\x7c\x04\x04\x0a\x37\x0a\x4f\x49\xac\xe0\xe6\xb4\x74\xe7\x8f\x19\xfa\xea\x4f\x16\xc7\xbf\x75\x3e\x02\x00\x00\xff\xff\x1d\x1f\xa8\x25\xd1\x01\x00\x00")

func _1_workflowUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_workflowUpSql,
		"1_workflow.up.sql",
	)
}

func _1_workflowUpSql() (*asset, error) {
	bytes, err := _1_workflowUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_workflow.up.sql", size: 465, mode: os.FileMode(420), modTime: time.Unix(1675703210, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_workflow_historyDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\xcf\x2f\xca\x4e\xcb\xc9\x2f\x8f\xcf\xc8\x2c\x2e\xc9\x2f\xaa\xb4\xe6\x02\x04\x00\x00\xff\xff\x36\x43\x21\xe4\x2e\x00\x00\x00")

func _2_workflow_historyDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_workflow_historyDownSql,
		"2_workflow_history.down.sql",
	)
}

func _2_workflow_historyDownSql() (*asset, error) {
	bytes, err := _2_workflow_historyDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_workflow_history.down.sql", size: 46, mode: os.FileMode(420), modTime: time.Unix(1675702988, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_workflow_historyUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\xbb\x4e\xf3\x40\x10\x05\xe0\x3e\x4f\x71\x3a\xdb\xd2\x5f\xfc\x0d\x15\x95\x93\x6c\x24\x83\x63\xa3\x78\x2d\x12\x1a\x6b\x65\x4f\x94\x55\xf0\x85\xd9\x71\xa2\x08\xf1\xee\x88\x04\x2c\x90\xc5\xa5\x3e\x67\xbf\xd9\x99\xd9\x4a\x85\x5a\x41\x87\xd3\x58\x21\x5a\x20\x49\x35\xd4\x3a\xca\x74\x86\x63\xcb\xfb\xed\x63\x7b\x2c\x76\xd6\x49\xcb\x27\xf8\x13\x00\xb0\x15\xf2\x3c\x9a\xe3\x6e\x15\x2d\xc3\xd5\x06\xb7\x6a\xf3\xef\x1c\x94\x4c\x46\xa8\x2a\x8c\x40\x6c\x4d\x4e\x4c\xdd\x9d\xbd\x24\x8f\x63\xcc\xd5\x22\xcc\x63\x0d\x3f\x49\xef\xfd\x00\xa1\x86\x8e\x96\x0a\x0f\x69\xa2\xe0\xe5\x7a\xe6\x05\x17\x45\x4e\x1d\xe1\x60\xb8\xdc\x19\xf6\xaf\xfe\x07\x83\x70\x89\x6d\xd3\xf5\x82\x9b\x2c\x4d\xa6\x63\xdb\x7b\x7e\xf1\x3e\xd5\x8a\x8e\xe9\x60\xdb\xde\xfd\xde\x77\x42\x5d\xd1\x98\xfa\xa7\xd1\xc3\x3d\x3e\x2e\x30\x78\x4c\x5b\x62\x6a\x4a\x72\x43\xc9\xb7\xd5\xfb\x42\x4c\x4f\x3d\x39\x79\x7b\xf5\xc5\x1e\xbb\x4e\x8c\xf4\xee\x2f\x3f\x20\xe6\x96\xa1\xd5\xfa\xfb\xb4\xd8\xdb\x66\x3c\x71\x12\x5c\x4f\x5e\x03\x00\x00\xff\xff\x36\x09\xbe\xc0\xf3\x01\x00\x00")

func _2_workflow_historyUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_workflow_historyUpSql,
		"2_workflow_history.up.sql",
	)
}

func _2_workflow_historyUpSql() (*asset, error) {
	bytes, err := _2_workflow_historyUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_workflow_history.up.sql", size: 499, mode: os.FileMode(420), modTime: time.Unix(1675703005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_workflow.down.sql":         _1_workflowDownSql,
	"1_workflow.up.sql":           _1_workflowUpSql,
	"2_workflow_history.down.sql": _2_workflow_historyDownSql,
	"2_workflow_history.up.sql":   _2_workflow_historyUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_workflow.down.sql":         &bintree{_1_workflowDownSql, map[string]*bintree{}},
	"1_workflow.up.sql":           &bintree{_1_workflowUpSql, map[string]*bintree{}},
	"2_workflow_history.down.sql": &bintree{_2_workflow_historyDownSql, map[string]*bintree{}},
	"2_workflow_history.up.sql":   &bintree{_2_workflow_historyUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
