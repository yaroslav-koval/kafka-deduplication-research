// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package schema generated by go-bindata.// sources:
// pkg/broker/errorinterceptor/migration/schema/1_event_broker_data.down.sql
// pkg/broker/errorinterceptor/migration/schema/1_event_broker_data.up.sql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_event_broker_dataDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\x4a\x2d\x29\xaa\x8c\x4f\x2a\xca\xcf\x4e\x2d\x8a\x4f\x2d\x4b\xcd\x2b\xb1\x06\x04\x00\x00\xff\xff\x8c\xec\x84\xb5\x2f\x00\x00\x00")

func _1_event_broker_dataDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_event_broker_dataDownSql,
		"1_event_broker_data.down.sql",
	)
}

func _1_event_broker_dataDownSql() (*asset, error) {
	bytes, err := _1_event_broker_dataDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_event_broker_data.down.sql", size: 47, mode: os.FileMode(420), modTime: time.Unix(1678698375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_event_broker_dataUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xce\xb1\x4a\xc4\x40\x10\xc6\xf1\x3a\xfb\x14\x5f\x77\x09\x04\xb1\xb1\xb2\x9a\x8b\x73\x18\x4d\x36\xc7\x66\xa2\x77\x36\x61\x2f\xbb\x42\xf0\x30\x61\x6f\xe3\xf3\x0b\x01\x45\x0b\x2b\xdb\xff\x0c\x3f\xbe\xc2\x30\x09\x43\x68\x5b\x31\xca\x1d\x74\x23\xe0\x43\xd9\x4a\x8b\x79\x39\x9d\xc7\xe1\xea\xd5\x8e\x67\xef\xfa\x53\x98\xde\x7c\xe8\xfd\x87\x7f\x8f\x48\x55\x32\x3a\x3c\x91\x29\xee\xc9\xa4\x37\xd7\x19\xf6\xa6\xac\xc9\x1c\xf1\xc8\xc7\x5c\x25\x43\xf0\x36\x7a\xd7\xdb\x08\x29\x6b\x6e\x85\xea\xfd\x4a\xeb\xae\xaa\x70\xc7\x3b\xea\x2a\x41\xaa\x9b\xe7\x34\x03\xc9\xfa\x84\x97\x46\x33\x36\x9d\x14\x9b\x2c\x57\xc9\x32\xbb\xff\x12\x97\x68\xe3\x72\xf9\x35\xf3\x0b\xc8\x55\x12\xa7\x79\x1c\xfe\x3a\x3a\x1b\x2d\x1e\xda\x46\x6f\x7f\x56\x1f\xc2\x14\x20\x7c\x90\xef\xaa\xb2\xdb\xcf\x00\x00\x00\xff\xff\x02\x55\x86\xab\x43\x01\x00\x00")

func _1_event_broker_dataUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_event_broker_dataUpSql,
		"1_event_broker_data.up.sql",
	)
}

func _1_event_broker_dataUpSql() (*asset, error) {
	bytes, err := _1_event_broker_dataUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_event_broker_data.up.sql", size: 323, mode: os.FileMode(420), modTime: time.Unix(1678889538, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_event_broker_data.down.sql": _1_event_broker_dataDownSql,
	"1_event_broker_data.up.sql":   _1_event_broker_dataUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_event_broker_data.down.sql": &bintree{_1_event_broker_dataDownSql, map[string]*bintree{}},
	"1_event_broker_data.up.sql":   &bintree{_1_event_broker_dataUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
