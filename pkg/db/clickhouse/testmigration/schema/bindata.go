// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/db/clickhouse/testmigration/schema/1_init.down.sql
// pkg/db/clickhouse/testmigration/schema/1_init.up.sql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_initDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\xc8\xcc\x2b\x2e\x49\xcc\x4b\x4e\x8d\x2f\x49\x2d\x2e\xb1\xe6\x02\x04\x00\x00\xff\xff\x9d\x06\x02\x2e\x24\x00\x00\x00")

func _1_initDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initDownSql,
		"1_init.down.sql",
	)
}

func _1_initDownSql() (*asset, error) {
	bytes, err := _1_initDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_init.down.sql", size: 36, mode: os.FileMode(420), modTime: time.Unix(1651733716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_initUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x31\x8b\x83\x40\x10\x46\x7b\x7f\xc5\x94\x0a\x57\x1e\xd7\x1c\x57\xe8\xb9\x84\x25\xd1\x84\xcd\x5a\x58\xc9\x46\x3f\xcc\x62\xb2\x91\x75\x2c\xcc\xaf\x0f\x46\x1b\x21\xdd\x3c\x1e\xf3\x86\xf9\x57\x22\xd6\x82\x74\x9c\x1c\x04\x59\x37\xb0\x71\x35\x2a\xc6\xc0\x14\x06\x44\x44\xb6\xa1\xa2\x90\xe9\xd7\x1b\x3a\x4c\x74\x66\x6f\x5d\xbb\x70\xed\x61\x18\x4d\x65\x98\x52\xc3\xd0\xf6\x8e\x45\x8c\x7d\xf3\x59\x5c\xc6\xba\x03\x6f\x22\x83\x7d\x82\xa4\xe3\x9f\xef\x35\xfa\x70\x0c\xc7\x15\x4f\x3d\xb6\xd7\x56\x71\x83\x6b\xf9\xba\xac\x04\x11\x89\x7c\x27\x73\xf1\x97\xc1\xb7\xd0\x1e\x08\x23\x3a\x29\x99\xc5\xaa\xa4\xbd\x28\xe7\x07\x8e\x2a\x15\x8a\x92\x79\xfe\x0d\x5e\x01\x00\x00\xff\xff\x9b\xe9\xc0\x29\xf2\x00\x00\x00")

func _1_initUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_initUpSql,
		"1_init.up.sql",
	)
}

func _1_initUpSql() (*asset, error) {
	bytes, err := _1_initUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_init.up.sql", size: 242, mode: os.FileMode(420), modTime: time.Unix(1651737007, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_init.down.sql": _1_initDownSql,
	"1_init.up.sql":   _1_initUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_init.down.sql": &bintree{_1_initDownSql, map[string]*bintree{}},
	"1_init.up.sql":   &bintree{_1_initUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
