// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package schema generated by go-bindata.// sources:
// pkg/db/postgres/testmigration/schema/1_init_test_table.down.sql
// pkg/db/postgres/testmigration/schema/1_init_test_table.up.sql
// pkg/db/postgres/testmigration/schema/2_extend_test_table.down.sql
// pkg/db/postgres/testmigration/schema/2_extend_test_table.up.sql
package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __1_init_test_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x49\x2d\x2e\x89\x2f\x49\x4c\xca\x49\xb5\x06\x04\x00\x00\xff\xff\x15\xaf\x67\x79\x20\x00\x00\x00")

func _1_init_test_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_init_test_tableDownSql,
		"1_init_test_table.down.sql",
	)
}

func _1_init_test_tableDownSql() (*asset, error) {
	bytes, err := _1_init_test_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_init_test_table.down.sql", size: 32, mode: os.FileMode(420), modTime: time.Unix(1650316365, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __1_init_test_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\xf0\xf3\x0f\x51\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x49\x2d\x2e\x89\x2f\x49\x4c\xca\x49\xe5\xd2\xe0\xe2\xcc\x4c\x51\xf0\xf4\x0b\x51\x08\x08\xf2\xf4\x75\x0c\x8a\x54\xf0\x76\x8d\xe4\xd2\xb4\x06\x04\x00\x00\xff\xff\xef\x72\x5a\xa5\x3e\x00\x00\x00")

func _1_init_test_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__1_init_test_tableUpSql,
		"1_init_test_table.up.sql",
	)
}

func _1_init_test_tableUpSql() (*asset, error) {
	bytes, err := _1_init_test_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "1_init_test_table.up.sql", size: 62, mode: os.FileMode(420), modTime: time.Unix(1650314904, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_extend_test_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\x49\x2d\x2e\x89\x2f\x49\x4c\xca\x49\x55\x70\x09\xf2\x0f\x50\x70\xf6\xf7\x09\xf5\xf5\x53\x48\xce\xcf\x29\xcd\xcd\x33\xb4\xe6\x22\x5f\xb3\x91\x35\x20\x00\x00\xff\xff\x62\x01\x79\x75\x79\x00\x00\x00")

func _2_extend_test_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_extend_test_tableDownSql,
		"2_extend_test_table.down.sql",
	)
}

func _2_extend_test_tableDownSql() (*asset, error) {
	bytes, err := _2_extend_test_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_extend_test_table.down.sql", size: 121, mode: os.FileMode(420), modTime: time.Unix(1650316547, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __2_extend_test_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x28\x4d\xca\xc9\x4c\xd6\x2b\x49\x2d\x2e\x89\x2f\x49\x4c\xca\x49\x55\x70\x74\x71\x51\x48\xce\xcf\x29\xcd\xcd\x33\x54\x28\x4b\x2c\x4a\xce\x48\x2c\xd2\x30\x35\xd0\xb4\xe6\x22\xdd\x00\x23\x14\x03\x00\x01\x00\x00\xff\xff\xe0\xb8\x91\xdc\x81\x00\x00\x00")

func _2_extend_test_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__2_extend_test_tableUpSql,
		"2_extend_test_table.up.sql",
	)
}

func _2_extend_test_tableUpSql() (*asset, error) {
	bytes, err := _2_extend_test_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "2_extend_test_table.up.sql", size: 129, mode: os.FileMode(420), modTime: time.Unix(1650316547, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"1_init_test_table.down.sql":   _1_init_test_tableDownSql,
	"1_init_test_table.up.sql":     _1_init_test_tableUpSql,
	"2_extend_test_table.down.sql": _2_extend_test_tableDownSql,
	"2_extend_test_table.up.sql":   _2_extend_test_tableUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"1_init_test_table.down.sql":   &bintree{_1_init_test_tableDownSql, map[string]*bintree{}},
	"1_init_test_table.up.sql":     &bintree{_1_init_test_tableUpSql, map[string]*bintree{}},
	"2_extend_test_table.down.sql": &bintree{_2_extend_test_tableDownSql, map[string]*bintree{}},
	"2_extend_test_table.up.sql":   &bintree{_2_extend_test_tableUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
