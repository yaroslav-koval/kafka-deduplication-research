version: '3.7'

networks:
  multiple_kafka_brokers:
    name: multiple_kafka_brokers

volumes:
  zookeeper_multiple_brokers_data:
  kafka1_data:
  kafka2_data:
  kafka3_data:

services:
  zookeeper1:
    image: bitnami/zookeeper:latest
    container_name: zookeeper1
    ports:
      - "2181:2181"
    networks:
      - multiple_kafka_brokers
    volumes:
      - "zookeeper_multiple_brokers_data:/bitnami"
    environment:
      - ZOO_ENABLE_AUTH=yes
      - ZOO_SERVER_USERS=kafka
      - ZOO_SERVER_PASSWORDS=kafka_password
    healthcheck:
      test: nc -z localhost 2181
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  kafka1:
    image: bitnami/kafka:latest
    container_name: kafka1
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - "kafka1_data:/bitnami"
    networks:
      - multiple_kafka_brokers
    environment:
      - KAFKA_ZOOKEEPER_USER=kafka
      - KAFKA_ZOOKEEPER_PASSWORD=kafka_password
      - KAFKA_ENABLE_IDEMPOTENCE=true
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CLIENT_USER=admin
      - KAFKA_CLIENT_PASSWORD=password
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper1:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka1:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      zookeeper1:
        condition: service_healthy
    healthcheck:
      test: kafka-topics.sh --bootstrap-server=localhost:9093 --list
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s

  kafka2:
    image: bitnami/kafka:latest
    container_name: kafka2
    ports:
      - "9094:9094"
    volumes:
      - "kafka2_data:/bitnami"
    networks:
      - multiple_kafka_brokers
    environment:
      - KAFKA_ZOOKEEPER_USER=kafka
      - KAFKA_ZOOKEEPER_PASSWORD=kafka_password
      - KAFKA_ENABLE_IDEMPOTENCE=true
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_BROKER_ID=2
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper1:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka2:9092,EXTERNAL://localhost:9094
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      zookeeper1:
        condition: service_healthy
      kafka1:
        condition: service_healthy
    healthcheck:
      test: kafka-topics.sh --bootstrap-server=localhost:9094 --list
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 5s


  kafka3:
    image: bitnami/kafka:latest
    container_name: kafka3
    ports:
      - "9095:9095"
    volumes:
      - "kafka3_data:/bitnami"
    networks:
      - multiple_kafka_brokers
    environment:
      - KAFKA_ZOOKEEPER_USER=kafka
      - KAFKA_ZOOKEEPER_PASSWORD=kafka_password
      - KAFKA_ENABLE_IDEMPOTENCE=true
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_BROKER_ID=3
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper1:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9095
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka3:9092,EXTERNAL://localhost:9095
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      zookeeper1:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy

  kafdrop:
    image: obsidiandynamics/kafdrop:3.29.0
    container_name: kafdrop
    restart: "no"
    networks:
      - multiple_kafka_brokers
    ports:
      - "9000:9000"
    volumes:
      - ./kafkadrop/kafka.conf:/kafdrop/kafka.conf:rw
    environment:
      - KAFKA_BROKERCONNECT=kafka1:9092
      - KAFKA_PROPERTIES_FILE="/kafdrop/kafka.conf"
      - CMD_ARGS="--zookeeper.connect=zookeeper1:2181"
    depends_on:
      zookeeper1:
        condition: service_healthy
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_started
      kafka3:
        condition: service_started
